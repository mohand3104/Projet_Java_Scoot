import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class ServiceLocation 
{

    public static void louerScooter(Parc parc, Client client, Scanner scanner) // Louer scooter
  {
        System.out.print("Entrez l'identifiant du scooter √† louer : ");
        int id_scooter = scanner.nextInt();
        scanner.nextLine(); // pour un saut de ligne

        Scooter scooterTrouve = null; // type scotter pour sauvegarder si trouv√©

        // Recherche du scooter dans le parc
        for (Scooter scooter : parc.getListScooter()) //r√©cup√©re la liste des scotter du parc
        {
            if (scooter.getId_Scooter() == id_scooter) //chercher notre scooter √† partir de cette liste 
            {
                scooterTrouve = scooter;// notre scotter
                break;
            }
        }

        if (scooterTrouve == null) 
        {
            System.out.println("‚ùå Scooter introuvable !");
            return;
        }

        // V√©rifie si le scooter est d√©j√† lou√© (s'il a une location sans retour)
        for (Location loc : scooterTrouve.getListlocation()) // √† partir de notre scooter on acc√©der √† ces locations
        {
            if (loc.getRetour() == null) //si il y a pas de date de retour
            {
                System.out.println("‚ùå Ce scooter est d√©j√† en location !");
                return;
            }
        }
//sinon
        try {
            System.out.print("Date de d√©but (jj/mm/aaaa) : ");
            String dateDebutStr = scanner.nextLine(); //format string
            Date date_debut = new SimpleDateFormat("dd/MM/yyyy").parse(dateDebutStr); //conversion vers Date

            int km_initial = scooterTrouve.getKilometrage(); // r√©cup√©r√© automatiquement

            System.out.print("Date de retour pr√©vue (jj/mm/aaaa) : ");
            String dateRetourStr = scanner.nextLine();
            Date date_retour_prevue = new SimpleDateFormat("dd/MM/yyyy").parse(dateRetourStr);

            // Cr√©er la location
            Location location = new Location(date_debut, km_initial, date_retour_prevue, scooterTrouve, client);

            // Lier la location au scooter et au client
            scooterTrouve.Location(location); // m√©thode d√©j√† pr√©sente dans ta classe Scooter
            client.addLocation(location);     // m√©thode d√©j√† pr√©sente dans Client
            
            // Mettre √† jour le statut du scooter pour qu'il soit en location
            scooterTrouve.setEnLocation(true); // Le scooter est d√©sormais en location
 

            System.out.println("‚úÖ Location enregistr√©e avec succ√®s !");

        } catch (Exception e) {
            System.out.println("‚ùå Erreur dans le format de date.");
        }
    }



    
    public void retournerScooter(Parc parc,Scanner scanner) //Retoure du scooter
    {
    System.out.print("üîé Entrez l'identifiant du scooter √† retourner : ");
    int idRecherche = scanner.nextInt();
    scanner.nextLine(); // pour vider la ligne

    Scooter scooterTrouve = null;
    for (Scooter scooter : parc.getListScooter()) 
    {
        if (scooter.getId_Scooter() == idRecherche) {
            scooterTrouve = scooter;
            break;
        }
    }

    if (scooterTrouve == null) {
        System.out.println("‚ùå Scooter introuvable.");
        return;
    } // c'est tranquille ici

    if (scooterTrouve.getListlocation().isEmpty()) //le scooter n'est pas lou√©
    {
        System.out.println("‚ö† Ce scooter n‚Äôest pas actuellement lou√©."); // logique
        return;
    }

    Location derniereLocation = scooterTrouve.getListlocation().lastElement();// recup√©rer la location la plus r√©cente

    if (derniereLocation.getRetour() != null) //si cette location a un  objet retour donc c'est retourn√©
    {
        System.out.println("‚ö† Ce scooter a d√©j√† √©t√© retourn√©.");
        return;
    }

    try {
        System.out.print(" Entrez le kilom√©trage actuel (retour) : ");
        int kmRetour = scanner.nextInt();
        scanner.nextLine();
        //Le kilom√©trage actuel (au moment du retour) d√©pend de ce que le client a roul√© avec le scooter , c'est manuelle 

        if (kmRetour < derniereLocation.getKmInitial()) //C'est logique
        {
            System.out.println("‚ùå Le kilom√©trage de retour ne peut pas √™tre inf√©rieur au kilom√©trage initial.");
            return;
        }

        int kmEffectue = kmRetour - derniereLocation.getKmInitial();
        scooterTrouve.setKilometrage(scooterTrouve.getKilometrage() + kmEffectue);//modifier le kilom√©trage
        /*
        Le kilom√©trage total du scooter est d√©j√† connu avant la location (ex : 10 000 km).

        Le kilom√©trage saisi au retour (ex : 10 300) inclut tout le kilom√©trage depuis la cr√©ation du scooter.

        Donc si tu fais + kmRetour, tu vas ajouter une deuxi√®me fois tout le kilom√©trage, ce qui double la valeur par erreur.
        c'est 20300 au lieu de 10300 , imagine dans plusieurs location !!!
        */

        Date dateRetour = new Date(); // aujourd'hui
        Retour retour = new Retour(dateRetour, kmRetour, derniereLocation);
        derniereLocation.setRetour(retour);

        // Marquer le scooter comme disponible
        scooterTrouve.setEnLocation(false); // Mettre √† jour le statut du scooter
        

        System.out.println("‚úÖ Scooter retourn√© avec succ√®s !");
        System.out.println("üìà Kilom√©trage ajout√© : " + kmEffectue + " km");
        System.out.println("üîÑ Le scooter est maintenant disponible.");
    } catch (Exception e) {
        System.out.println("‚ùå Erreur de saisie.");
    }
}


}

